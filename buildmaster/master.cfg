#!/usr/bin/env python
# buildbot-ros configuration file

# import relevant parts
from buildbot_ros_cfg.ros_deb import ros_debbuild
from buildbot_ros_cfg.ros_test import ros_testbuild
from buildbot_ros_cfg.ros_doc import ros_docbuild
from buildbot_ros_cfg.launchpad_deb import launchpad_debbuild
from buildbot_ros_cfg.distro import *

from buildbot.schedulers import forcesched, timed

from buildbot.status import html
from buildbot.status.web import authz, auth

from buildbot.buildslave import BuildSlave

from rosdistro import get_index

# BuildMasterConfig
c = BuildmasterConfig = {}
c['title'] = 'Buildbot-ROS'
c['titleURL'] = 'http://github.com/mikeferguson/buildbot-ros'
c['buildbotURL'] = "http://localhost:8010/"
c['builders'] = []
c['change_source'] = []
c['schedulers'] = []

c['db'] = {
    # This specifies what database buildbot uses to store its state. You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}

# Web front end
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more options
    auth=auth.BasicAuth([("ros","ros")]),
    gracefulShutdown = False,
    forceBuild = 'auth',
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'] = []
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

# Build Machines
c['slaves'] = [BuildSlave('rosbuilder1', 'mebuildslotsaros'),
               BuildSlave('rosbuilder2', 'mebuildslotsaros')]
c['slavePortnum'] = 9989
BUILDERS = ['rosbuilder1', 'rosbuilder2']

# RosDistro Stuff
rosindex = get_index('https://raw.github.com/mikeferguson/rosdistro-buildbot-example/with-apache/index.yaml')
dist_names = rosindex.distributions.keys()
oracle = RosDistroOracle(rosindex, dist_names)

# Setup jobs
DEB_JOBS = list()
TEST_JOBS = list()
DOC_JOBS = list()
LPD_JOBS = list()
nightlyDebNames = list()
nightlyDocNames = list()
for dist in dist_names:
    print('')
    print('Configuring for %s' % dist)

    # debian builder
    DEB_JOBS += debbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # test jobs, triggered by source commit
    TEST_JOBS += testbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # doc jobs
    DOC_JOBS = docbuilders_from_rosdistro(c, oracle, dist, BUILDERS)

    # get name of first of nightly debuilds for this distro
    build_files = get_release_build_files(oracle.getIndex(), dist)
    for build_file in build_files:
        for os in build_file.get_target_os_names():
            for code_name in build_file.get_target_os_code_names(os):
                for arch in build_file.get_target_arches(os, code_name):
                    nightlyDebNames.append(oracle.getNightlyDebStart(dist)+'_'+dist+'_'+code_name+'_'+arch+'_debbuild')

    # get name of first nightly docbuilds for this distro
    nightlyDocNames.append(oracle.getNightlyDocStart(dist)+'_'+dist+'_docbuild')
    print('')

# Build debs at 2AM
c['schedulers'].append(
    timed.Nightly(
        name = 'nightly-debbuild',
        branch = 'master',
        builderNames = nightlyDebNames,
        hour=2,
        minute=0
    )
)

# Build debs at 5AM
c['schedulers'].append(
    timed.Nightly(
        name = 'nightly-docbuild',
        branch = 'master',
        builderNames = nightlyDocNames,
        hour=5,
        minute=0
    )
)

c['schedulers'].append(
    forcesched.ForceScheduler(
        name='force',
        builderNames=DEB_JOBS+TEST_JOBS+DOC_JOBS+LPD_JOBS
    )
)
